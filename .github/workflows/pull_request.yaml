name: pull_request

on:
  workflow_call:
    inputs:
      enableOpenApiCheck:
        description: "Flag to enable OpenAPI lint checks"
        type: boolean
        required: false
        default: true
      openApiFilePath:
        description: "Path to the OpenAPI file (if enableOpenApiCheck is true)"
        type: string
        required: false
        default: "./openapi3.yaml"
      usePostgres:
        description: "Flag to set up postgres database for tests"
        type: boolean
        required: false
        default: false
      enableHelmLint:
        description: "Flag to enable helm lint"
        type: boolean
        required: false
        default: true
      chartDirs:
        description: "The root dir or dirs (separated with commas)"
        type: string
        required: false
        default: "."

jobs:
  helm-lint:
    if: ${{ inputs.enableHelmLint == true }}
    uses: MapColonies/shared-workflows/.github/workflows/helm-lint.yaml@master
    secrets: inherit
    with:
      chartDirs: ${{ inputs.chartDirs }}

  eslint:
    name: Run eslint
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run linters
        run: npm run lint
        
  openapi-lint:
    name: Run openapi-lint
    runs-on: ubuntu-latest
    if: ${{ inputs.enableOpenApiCheck == true }}

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Run linters
        run: npm run lint
        
      - name: OpenAPI Lint Checks
        run: npx @redocly/cli lint --format=github-actions ${{ inputs.openApiFilePath }}

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  tests:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node: [20.x, 22.x]
    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: ${{ (inputs.usePostgres == true) && 'postgis/postgis:13-3.4' || ''}}
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: 1234
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - name: Install Node.js dependencies
        run: npm ci

      - name: Run tests
        run: npm run test

      - uses: actions/upload-artifact@v4
        with:
          name: Test Reporters Node-${{ matrix.node }}
          path: reports/**

  build_image:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      - name: build Docker image
        run: docker build -t test-build:latest .
